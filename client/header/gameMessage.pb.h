// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameMessage.proto

#ifndef PROTOBUF_INCLUDED_gameMessage_2eproto
#define PROTOBUF_INCLUDED_gameMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_gameMessage_2eproto 

namespace protobuf_gameMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_gameMessage_2eproto
namespace GameProto {
class BattleField;
class BattleFieldDefaultTypeInternal;
extern BattleFieldDefaultTypeInternal _BattleField_default_instance_;
class Food;
class FoodDefaultTypeInternal;
extern FoodDefaultTypeInternal _Food_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
class Snake;
class SnakeDefaultTypeInternal;
extern SnakeDefaultTypeInternal _Snake_default_instance_;
}  // namespace GameProto
namespace google {
namespace protobuf {
template<> ::GameProto::BattleField* Arena::CreateMaybeMessage<::GameProto::BattleField>(Arena*);
template<> ::GameProto::Food* Arena::CreateMaybeMessage<::GameProto::Food>(Arena*);
template<> ::GameProto::Point* Arena::CreateMaybeMessage<::GameProto::Point>(Arena*);
template<> ::GameProto::ServerMessage* Arena::CreateMaybeMessage<::GameProto::ServerMessage>(Arena*);
template<> ::GameProto::Snake* Arena::CreateMaybeMessage<::GameProto::Snake>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace GameProto {

enum ServerMessage_ActionType {
  ServerMessage_ActionType_SyncMap = 0,
  ServerMessage_ActionType_LossGame = 1,
  ServerMessage_ActionType_WinGame = 2
};
bool ServerMessage_ActionType_IsValid(int value);
const ServerMessage_ActionType ServerMessage_ActionType_ActionType_MIN = ServerMessage_ActionType_SyncMap;
const ServerMessage_ActionType ServerMessage_ActionType_ActionType_MAX = ServerMessage_ActionType_WinGame;
const int ServerMessage_ActionType_ActionType_ARRAYSIZE = ServerMessage_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerMessage_ActionType_descriptor();
inline const ::std::string& ServerMessage_ActionType_Name(ServerMessage_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerMessage_ActionType_descriptor(), value);
}
inline bool ServerMessage_ActionType_Parse(
    const ::std::string& name, ServerMessage_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerMessage_ActionType>(
    ServerMessage_ActionType_descriptor(), name, value);
}
// ===================================================================

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(NULL);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameProto.Point)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend struct ::protobuf_gameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Food : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.Food) */ {
 public:
  Food();
  virtual ~Food();

  Food(const Food& from);

  inline Food& operator=(const Food& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Food(Food&& from) noexcept
    : Food() {
    *this = ::std::move(from);
  }

  inline Food& operator=(Food&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Food& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Food* internal_default_instance() {
    return reinterpret_cast<const Food*>(
               &_Food_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Food* other);
  friend void swap(Food& a, Food& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Food* New() const final {
    return CreateMaybeMessage<Food>(NULL);
  }

  Food* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Food>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Food& from);
  void MergeFrom(const Food& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Food* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameProto.Food)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend struct ::protobuf_gameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Snake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.Snake) */ {
 public:
  Snake();
  virtual ~Snake();

  Snake(const Snake& from);

  inline Snake& operator=(const Snake& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Snake(Snake&& from) noexcept
    : Snake() {
    *this = ::std::move(from);
  }

  inline Snake& operator=(Snake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Snake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snake* internal_default_instance() {
    return reinterpret_cast<const Snake*>(
               &_Snake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Snake* other);
  friend void swap(Snake& a, Snake& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Snake* New() const final {
    return CreateMaybeMessage<Snake>(NULL);
  }

  Snake* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Snake>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Snake& from);
  void MergeFrom(const Snake& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GameProto.Point node = 2;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 2;
  ::GameProto::Point* mutable_node(int index);
  ::google::protobuf::RepeatedPtrField< ::GameProto::Point >*
      mutable_node();
  const ::GameProto::Point& node(int index) const;
  ::GameProto::Point* add_node();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::Point >&
      node() const;

  // required int32 color = 1;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 1;
  ::google::protobuf::int32 color() const;
  void set_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameProto.Snake)
 private:
  void set_has_color();
  void clear_has_color();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::Point > node_;
  ::google::protobuf::int32 color_;
  friend struct ::protobuf_gameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BattleField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.BattleField) */ {
 public:
  BattleField();
  virtual ~BattleField();

  BattleField(const BattleField& from);

  inline BattleField& operator=(const BattleField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BattleField(BattleField&& from) noexcept
    : BattleField() {
    *this = ::std::move(from);
  }

  inline BattleField& operator=(BattleField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleField* internal_default_instance() {
    return reinterpret_cast<const BattleField*>(
               &_BattleField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BattleField* other);
  friend void swap(BattleField& a, BattleField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BattleField* New() const final {
    return CreateMaybeMessage<BattleField>(NULL);
  }

  BattleField* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BattleField>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BattleField& from);
  void MergeFrom(const BattleField& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GameProto.Snake snake = 1;
  int snake_size() const;
  void clear_snake();
  static const int kSnakeFieldNumber = 1;
  ::GameProto::Snake* mutable_snake(int index);
  ::google::protobuf::RepeatedPtrField< ::GameProto::Snake >*
      mutable_snake();
  const ::GameProto::Snake& snake(int index) const;
  ::GameProto::Snake* add_snake();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::Snake >&
      snake() const;

  // repeated .GameProto.Food food = 2;
  int food_size() const;
  void clear_food();
  static const int kFoodFieldNumber = 2;
  ::GameProto::Food* mutable_food(int index);
  ::google::protobuf::RepeatedPtrField< ::GameProto::Food >*
      mutable_food();
  const ::GameProto::Food& food(int index) const;
  ::GameProto::Food* add_food();
  const ::google::protobuf::RepeatedPtrField< ::GameProto::Food >&
      food() const;

  // @@protoc_insertion_point(class_scope:GameProto.BattleField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::Snake > snake_;
  ::google::protobuf::RepeatedPtrField< ::GameProto::Food > food_;
  friend struct ::protobuf_gameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameProto.ServerMessage) */ {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ServerMessage* other);
  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const final {
    return CreateMaybeMessage<ServerMessage>(NULL);
  }

  ServerMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerMessage_ActionType ActionType;
  static const ActionType SyncMap =
    ServerMessage_ActionType_SyncMap;
  static const ActionType LossGame =
    ServerMessage_ActionType_LossGame;
  static const ActionType WinGame =
    ServerMessage_ActionType_WinGame;
  static inline bool ActionType_IsValid(int value) {
    return ServerMessage_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    ServerMessage_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    ServerMessage_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    ServerMessage_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return ServerMessage_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return ServerMessage_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return ServerMessage_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .GameProto.BattleField battle_field = 2;
  bool has_battle_field() const;
  void clear_battle_field();
  static const int kBattleFieldFieldNumber = 2;
  private:
  const ::GameProto::BattleField& _internal_battle_field() const;
  public:
  const ::GameProto::BattleField& battle_field() const;
  ::GameProto::BattleField* release_battle_field();
  ::GameProto::BattleField* mutable_battle_field();
  void set_allocated_battle_field(::GameProto::BattleField* battle_field);

  // required .GameProto.ServerMessage.ActionType action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::GameProto::ServerMessage_ActionType action() const;
  void set_action(::GameProto::ServerMessage_ActionType value);

  // @@protoc_insertion_point(class_scope:GameProto.ServerMessage)
 private:
  void set_has_action();
  void clear_has_action();
  void set_has_battle_field();
  void clear_has_battle_field();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::GameProto::BattleField* battle_field_;
  int action_;
  friend struct ::protobuf_gameMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// required int32 x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:GameProto.Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Point.x)
}

// required int32 y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:GameProto.Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Point.y)
}

// -------------------------------------------------------------------

// Food

// required int32 x = 1;
inline bool Food::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Food::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Food::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Food::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Food::x() const {
  // @@protoc_insertion_point(field_get:GameProto.Food.x)
  return x_;
}
inline void Food::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Food.x)
}

// required int32 y = 2;
inline bool Food::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Food::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Food::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Food::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Food::y() const {
  // @@protoc_insertion_point(field_get:GameProto.Food.y)
  return y_;
}
inline void Food::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Food.y)
}

// -------------------------------------------------------------------

// Snake

// required int32 color = 1;
inline bool Snake::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Snake::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Snake::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Snake::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 Snake::color() const {
  // @@protoc_insertion_point(field_get:GameProto.Snake.color)
  return color_;
}
inline void Snake::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:GameProto.Snake.color)
}

// repeated .GameProto.Point node = 2;
inline int Snake::node_size() const {
  return node_.size();
}
inline void Snake::clear_node() {
  node_.Clear();
}
inline ::GameProto::Point* Snake::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.Snake.node)
  return node_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::Point >*
Snake::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.Snake.node)
  return &node_;
}
inline const ::GameProto::Point& Snake::node(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.Snake.node)
  return node_.Get(index);
}
inline ::GameProto::Point* Snake::add_node() {
  // @@protoc_insertion_point(field_add:GameProto.Snake.node)
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::Point >&
Snake::node() const {
  // @@protoc_insertion_point(field_list:GameProto.Snake.node)
  return node_;
}

// -------------------------------------------------------------------

// BattleField

// repeated .GameProto.Snake snake = 1;
inline int BattleField::snake_size() const {
  return snake_.size();
}
inline void BattleField::clear_snake() {
  snake_.Clear();
}
inline ::GameProto::Snake* BattleField::mutable_snake(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.BattleField.snake)
  return snake_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::Snake >*
BattleField::mutable_snake() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.BattleField.snake)
  return &snake_;
}
inline const ::GameProto::Snake& BattleField::snake(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.BattleField.snake)
  return snake_.Get(index);
}
inline ::GameProto::Snake* BattleField::add_snake() {
  // @@protoc_insertion_point(field_add:GameProto.BattleField.snake)
  return snake_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::Snake >&
BattleField::snake() const {
  // @@protoc_insertion_point(field_list:GameProto.BattleField.snake)
  return snake_;
}

// repeated .GameProto.Food food = 2;
inline int BattleField::food_size() const {
  return food_.size();
}
inline void BattleField::clear_food() {
  food_.Clear();
}
inline ::GameProto::Food* BattleField::mutable_food(int index) {
  // @@protoc_insertion_point(field_mutable:GameProto.BattleField.food)
  return food_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::GameProto::Food >*
BattleField::mutable_food() {
  // @@protoc_insertion_point(field_mutable_list:GameProto.BattleField.food)
  return &food_;
}
inline const ::GameProto::Food& BattleField::food(int index) const {
  // @@protoc_insertion_point(field_get:GameProto.BattleField.food)
  return food_.Get(index);
}
inline ::GameProto::Food* BattleField::add_food() {
  // @@protoc_insertion_point(field_add:GameProto.BattleField.food)
  return food_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GameProto::Food >&
BattleField::food() const {
  // @@protoc_insertion_point(field_list:GameProto.BattleField.food)
  return food_;
}

// -------------------------------------------------------------------

// ServerMessage

// required .GameProto.ServerMessage.ActionType action = 1;
inline bool ServerMessage::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerMessage::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerMessage::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerMessage::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::GameProto::ServerMessage_ActionType ServerMessage::action() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMessage.action)
  return static_cast< ::GameProto::ServerMessage_ActionType >(action_);
}
inline void ServerMessage::set_action(::GameProto::ServerMessage_ActionType value) {
  assert(::GameProto::ServerMessage_ActionType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:GameProto.ServerMessage.action)
}

// optional .GameProto.BattleField battle_field = 2;
inline bool ServerMessage::has_battle_field() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerMessage::set_has_battle_field() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerMessage::clear_has_battle_field() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerMessage::clear_battle_field() {
  if (battle_field_ != NULL) battle_field_->Clear();
  clear_has_battle_field();
}
inline const ::GameProto::BattleField& ServerMessage::_internal_battle_field() const {
  return *battle_field_;
}
inline const ::GameProto::BattleField& ServerMessage::battle_field() const {
  const ::GameProto::BattleField* p = battle_field_;
  // @@protoc_insertion_point(field_get:GameProto.ServerMessage.battle_field)
  return p != NULL ? *p : *reinterpret_cast<const ::GameProto::BattleField*>(
      &::GameProto::_BattleField_default_instance_);
}
inline ::GameProto::BattleField* ServerMessage::release_battle_field() {
  // @@protoc_insertion_point(field_release:GameProto.ServerMessage.battle_field)
  clear_has_battle_field();
  ::GameProto::BattleField* temp = battle_field_;
  battle_field_ = NULL;
  return temp;
}
inline ::GameProto::BattleField* ServerMessage::mutable_battle_field() {
  set_has_battle_field();
  if (battle_field_ == NULL) {
    auto* p = CreateMaybeMessage<::GameProto::BattleField>(GetArenaNoVirtual());
    battle_field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMessage.battle_field)
  return battle_field_;
}
inline void ServerMessage::set_allocated_battle_field(::GameProto::BattleField* battle_field) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete battle_field_;
  }
  if (battle_field) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      battle_field = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, battle_field, submessage_arena);
    }
    set_has_battle_field();
  } else {
    clear_has_battle_field();
  }
  battle_field_ = battle_field;
  // @@protoc_insertion_point(field_set_allocated:GameProto.ServerMessage.battle_field)
}

// optional string msg = 3;
inline bool ServerMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerMessage::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerMessage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ServerMessage::msg() const {
  // @@protoc_insertion_point(field_get:GameProto.ServerMessage.msg)
  return msg_.GetNoArena();
}
inline void ServerMessage::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameProto.ServerMessage.msg)
}
#if LANG_CXX11
inline void ServerMessage::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GameProto.ServerMessage.msg)
}
#endif
inline void ServerMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameProto.ServerMessage.msg)
}
inline void ServerMessage::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameProto.ServerMessage.msg)
}
inline ::std::string* ServerMessage::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:GameProto.ServerMessage.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerMessage::release_msg() {
  // @@protoc_insertion_point(field_release:GameProto.ServerMessage.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerMessage::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:GameProto.ServerMessage.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GameProto::ServerMessage_ActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameProto::ServerMessage_ActionType>() {
  return ::GameProto::ServerMessage_ActionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_gameMessage_2eproto
