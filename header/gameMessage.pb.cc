// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameMessage.proto

#include "gameMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_gameMessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gameMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Food;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gameMessage_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gameMessage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Snake;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_gameMessage_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BattleField;
}  // namespace protobuf_gameMessage_2eproto
namespace GameProto {
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class FoodDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Food>
      _instance;
} _Food_default_instance_;
class SnakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Snake>
      _instance;
} _Snake_default_instance_;
class BattleFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BattleField>
      _instance;
} _BattleField_default_instance_;
class ServerMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerMessage>
      _instance;
} _ServerMessage_default_instance_;
}  // namespace GameProto
namespace protobuf_gameMessage_2eproto {
static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameProto::_Point_default_instance_;
    new (ptr) ::GameProto::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsFood() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameProto::_Food_default_instance_;
    new (ptr) ::GameProto::Food();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::Food::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Food =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFood}, {}};

static void InitDefaultsSnake() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameProto::_Snake_default_instance_;
    new (ptr) ::GameProto::Snake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::Snake::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Snake =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSnake}, {
      &protobuf_gameMessage_2eproto::scc_info_Point.base,}};

static void InitDefaultsBattleField() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameProto::_BattleField_default_instance_;
    new (ptr) ::GameProto::BattleField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::BattleField::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BattleField =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBattleField}, {
      &protobuf_gameMessage_2eproto::scc_info_Snake.base,
      &protobuf_gameMessage_2eproto::scc_info_Food.base,}};

static void InitDefaultsServerMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GameProto::_ServerMessage_default_instance_;
    new (ptr) ::GameProto::ServerMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameProto::ServerMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ServerMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServerMessage}, {
      &protobuf_gameMessage_2eproto::scc_info_BattleField.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Food.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Snake.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BattleField.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerMessage.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Point, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Food, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Food, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Food, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Food, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Snake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Snake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Snake, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::Snake, node_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::BattleField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::BattleField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::BattleField, snake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::BattleField, food_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerMessage, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerMessage, battle_field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameProto::ServerMessage, msg_),
  2,
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::GameProto::Point)},
  { 9, 16, sizeof(::GameProto::Food)},
  { 18, 25, sizeof(::GameProto::Snake)},
  { 27, 34, sizeof(::GameProto::BattleField)},
  { 36, 44, sizeof(::GameProto::ServerMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_Food_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_Snake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_BattleField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::GameProto::_ServerMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "gameMessage.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021gameMessage.proto\022\tGameProto\"\035\n\005Point\022"
      "\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\"\034\n\004Food\022\t\n\001x\030\001 \002(\005"
      "\022\t\n\001y\030\002 \002(\005\"6\n\005Snake\022\r\n\005color\030\001 \002(\005\022\036\n\004n"
      "ode\030\002 \003(\0132\020.GameProto.Point\"M\n\013BattleFie"
      "ld\022\037\n\005snake\030\001 \003(\0132\020.GameProto.Snake\022\035\n\004f"
      "ood\030\002 \003(\0132\017.GameProto.Food\"\265\001\n\rServerMes"
      "sage\0223\n\006action\030\001 \002(\0162#.GameProto.ServerM"
      "essage.ActionType\022,\n\014battle_field\030\002 \001(\0132"
      "\026.GameProto.BattleField\022\013\n\003msg\030\003 \001(\t\"4\n\n"
      "ActionType\022\013\n\007SyncMap\020\000\022\014\n\010LossGame\020\001\022\013\n"
      "\007WinGame\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 410);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_gameMessage_2eproto
namespace GameProto {
const ::google::protobuf::EnumDescriptor* ServerMessage_ActionType_descriptor() {
  protobuf_gameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameMessage_2eproto::file_level_enum_descriptors[0];
}
bool ServerMessage_ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ServerMessage_ActionType ServerMessage::SyncMap;
const ServerMessage_ActionType ServerMessage::LossGame;
const ServerMessage_ActionType ServerMessage::WinGame;
const ServerMessage_ActionType ServerMessage::ActionType_MIN;
const ServerMessage_ActionType ServerMessage::ActionType_MAX;
const int ServerMessage::ActionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gameMessage_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:GameProto.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:GameProto.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_gameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gameMessage_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.Point)
  return target;
}

size_t Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameProto.Point)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_gameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Food::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Food::kXFieldNumber;
const int Food::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Food::Food()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gameMessage_2eproto::scc_info_Food.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.Food)
}
Food::Food(const Food& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:GameProto.Food)
}

void Food::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Food::~Food() {
  // @@protoc_insertion_point(destructor:GameProto.Food)
  SharedDtor();
}

void Food::SharedDtor() {
}

void Food::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Food::descriptor() {
  ::protobuf_gameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Food& Food::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gameMessage_2eproto::scc_info_Food.base);
  return *internal_default_instance();
}


void Food::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.Food)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Food::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.Food)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.Food)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.Food)
  return false;
#undef DO_
}

void Food::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.Food)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.Food)
}

::google::protobuf::uint8* Food::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.Food)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.Food)
  return target;
}

size_t Food::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameProto.Food)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
size_t Food::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.Food)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Food::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.Food)
  GOOGLE_DCHECK_NE(&from, this);
  const Food* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Food>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.Food)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.Food)
    MergeFrom(*source);
  }
}

void Food::MergeFrom(const Food& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.Food)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Food::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.Food)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Food::CopyFrom(const Food& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.Food)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Food::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Food::Swap(Food* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Food::InternalSwap(Food* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Food::GetMetadata() const {
  protobuf_gameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Snake::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snake::kColorFieldNumber;
const int Snake::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snake::Snake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gameMessage_2eproto::scc_info_Snake.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.Snake)
}
Snake::Snake(const Snake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      node_(from.node_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_ = from.color_;
  // @@protoc_insertion_point(copy_constructor:GameProto.Snake)
}

void Snake::SharedCtor() {
  color_ = 0;
}

Snake::~Snake() {
  // @@protoc_insertion_point(destructor:GameProto.Snake)
  SharedDtor();
}

void Snake::SharedDtor() {
}

void Snake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Snake::descriptor() {
  ::protobuf_gameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Snake& Snake::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gameMessage_2eproto::scc_info_Snake.base);
  return *internal_default_instance();
}


void Snake::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.Snake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  color_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Snake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.Snake)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameProto.Point node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.Snake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.Snake)
  return false;
#undef DO_
}

void Snake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.Snake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->color(), output);
  }

  // repeated .GameProto.Point node = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->node(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.Snake)
}

::google::protobuf::uint8* Snake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.Snake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->color(), target);
  }

  // repeated .GameProto.Point node = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->node(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.Snake)
  return target;
}

size_t Snake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.Snake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 color = 1;
  if (has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }
  // repeated .GameProto.Point node = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->node_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.Snake)
  GOOGLE_DCHECK_NE(&from, this);
  const Snake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Snake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.Snake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.Snake)
    MergeFrom(*source);
  }
}

void Snake::MergeFrom(const Snake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.Snake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  if (from.has_color()) {
    set_color(from.color());
  }
}

void Snake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.Snake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snake::CopyFrom(const Snake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.Snake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snake::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->node())) return false;
  return true;
}

void Snake::Swap(Snake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snake::InternalSwap(Snake* other) {
  using std::swap;
  CastToBase(&node_)->InternalSwap(CastToBase(&other->node_));
  swap(color_, other->color_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Snake::GetMetadata() const {
  protobuf_gameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BattleField::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattleField::kSnakeFieldNumber;
const int BattleField::kFoodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattleField::BattleField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gameMessage_2eproto::scc_info_BattleField.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.BattleField)
}
BattleField::BattleField(const BattleField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      snake_(from.snake_),
      food_(from.food_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GameProto.BattleField)
}

void BattleField::SharedCtor() {
}

BattleField::~BattleField() {
  // @@protoc_insertion_point(destructor:GameProto.BattleField)
  SharedDtor();
}

void BattleField::SharedDtor() {
}

void BattleField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BattleField::descriptor() {
  ::protobuf_gameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattleField& BattleField::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gameMessage_2eproto::scc_info_BattleField.base);
  return *internal_default_instance();
}


void BattleField::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.BattleField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snake_.Clear();
  food_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BattleField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.BattleField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameProto.Snake snake = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_snake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .GameProto.Food food = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_food()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.BattleField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.BattleField)
  return false;
#undef DO_
}

void BattleField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.BattleField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameProto.Snake snake = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snake_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->snake(static_cast<int>(i)),
      output);
  }

  // repeated .GameProto.Food food = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->food_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->food(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.BattleField)
}

::google::protobuf::uint8* BattleField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.BattleField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameProto.Snake snake = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snake_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->snake(static_cast<int>(i)), deterministic, target);
  }

  // repeated .GameProto.Food food = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->food_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->food(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.BattleField)
  return target;
}

size_t BattleField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.BattleField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .GameProto.Snake snake = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->snake_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->snake(static_cast<int>(i)));
    }
  }

  // repeated .GameProto.Food food = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->food_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->food(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.BattleField)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattleField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.BattleField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.BattleField)
    MergeFrom(*source);
  }
}

void BattleField::MergeFrom(const BattleField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.BattleField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snake_.MergeFrom(from.snake_);
  food_.MergeFrom(from.food_);
}

void BattleField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.BattleField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleField::CopyFrom(const BattleField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.BattleField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleField::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->snake())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->food())) return false;
  return true;
}

void BattleField::Swap(BattleField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattleField::InternalSwap(BattleField* other) {
  using std::swap;
  CastToBase(&snake_)->InternalSwap(CastToBase(&other->snake_));
  CastToBase(&food_)->InternalSwap(CastToBase(&other->food_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BattleField::GetMetadata() const {
  protobuf_gameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerMessage::InitAsDefaultInstance() {
  ::GameProto::_ServerMessage_default_instance_._instance.get_mutable()->battle_field_ = const_cast< ::GameProto::BattleField*>(
      ::GameProto::BattleField::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerMessage::kActionFieldNumber;
const int ServerMessage::kBattleFieldFieldNumber;
const int ServerMessage::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMessage::ServerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_gameMessage_2eproto::scc_info_ServerMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameProto.ServerMessage)
}
ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_battle_field()) {
    battle_field_ = new ::GameProto::BattleField(*from.battle_field_);
  } else {
    battle_field_ = NULL;
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:GameProto.ServerMessage)
}

void ServerMessage::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&battle_field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&battle_field_)) + sizeof(action_));
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:GameProto.ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete battle_field_;
}

void ServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerMessage::descriptor() {
  ::protobuf_gameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gameMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerMessage& ServerMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_gameMessage_2eproto::scc_info_ServerMessage.base);
  return *internal_default_instance();
}


void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GameProto.ServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      msg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(battle_field_ != NULL);
      battle_field_->Clear();
    }
  }
  action_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameProto.ServerMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameProto.ServerMessage.ActionType action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameProto::ServerMessage_ActionType_IsValid(value)) {
            set_action(static_cast< ::GameProto::ServerMessage_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .GameProto.BattleField battle_field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_battle_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GameProto.ServerMessage.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameProto.ServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameProto.ServerMessage)
  return false;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameProto.ServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .GameProto.ServerMessage.ActionType action = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional .GameProto.BattleField battle_field = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_battle_field(), output);
  }

  // optional string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameProto.ServerMessage.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameProto.ServerMessage)
}

::google::protobuf::uint8* ServerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameProto.ServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .GameProto.ServerMessage.ActionType action = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional .GameProto.BattleField battle_field = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_battle_field(), deterministic, target);
  }

  // optional string msg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GameProto.ServerMessage.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameProto.ServerMessage)
  return target;
}

size_t ServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameProto.ServerMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .GameProto.ServerMessage.ActionType action = 1;
  if (has_action()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional .GameProto.BattleField battle_field = 2;
    if (has_battle_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *battle_field_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameProto.ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameProto.ServerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameProto.ServerMessage)
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameProto.ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_battle_field()->::GameProto::BattleField::MergeFrom(from.battle_field());
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameProto.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameProto.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  if (has_battle_field()) {
    if (!this->battle_field_->IsInitialized()) return false;
  }
  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMessage::InternalSwap(ServerMessage* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(battle_field_, other->battle_field_);
  swap(action_, other->action_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerMessage::GetMetadata() const {
  protobuf_gameMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_gameMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameProto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameProto::Point* Arena::CreateMaybeMessage< ::GameProto::Point >(Arena* arena) {
  return Arena::CreateInternal< ::GameProto::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameProto::Food* Arena::CreateMaybeMessage< ::GameProto::Food >(Arena* arena) {
  return Arena::CreateInternal< ::GameProto::Food >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameProto::Snake* Arena::CreateMaybeMessage< ::GameProto::Snake >(Arena* arena) {
  return Arena::CreateInternal< ::GameProto::Snake >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameProto::BattleField* Arena::CreateMaybeMessage< ::GameProto::BattleField >(Arena* arena) {
  return Arena::CreateInternal< ::GameProto::BattleField >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameProto::ServerMessage* Arena::CreateMaybeMessage< ::GameProto::ServerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GameProto::ServerMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
